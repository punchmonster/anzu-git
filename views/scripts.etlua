

function followButton(userHandle) {

  var button = document.querySelector(".follow-btn");

  var toggleURL = "";

  if (button.innerHTML == "Unfollow") {
    toggleURL = "/remove"
    button.innerHTML = "Follow"
  } else {
    button.innerHTML = "Unfollow"
  }

  const Url='http://yukku.org:8080/API/follow/' + userHandle + toggleURL;

  fetch(Url)
  .then(data=>{return data.json()})
  .then(res=>{console.log(res)})

}

function postRedirect(URL, userHandle, postID) {
  console.log(URL + userHandle + "/" + postID)
  window.location.href = URL + userHandle + "/" + postID
}

// searches for a parent element of certain name
var getParent = function (elem, selector) {

	// Element.matches() polyfill
  if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector ||
                              Element.prototype.webkitMatchesSelector;
  }

	// Get the closest matching element
	for ( ; elem && elem !== document; elem = elem.parentNode ) {
		if ( elem.matches( selector ) ) return elem;
	}
	return null;

};

// tag button function
const tagClick = e => {
  event.stopPropagation();
  var parent = getParent(e.target, '.post-body');

  const Url='http://yukku.org:8080/API/tags/modify/' + parent.getAttribute("data-post-id");

  fetch(Url)
  .then(data=>{return data.json()})
  .then(data=>{
    console.log(data.success)
    if (e.target.classList.contains("green-tag")) {
      e.target.classList.remove("green-tag");
    } else {
      e.target.classList.add("green-tag");
    }
  });

  console.log("tag post with ID: " + parent.getAttribute("data-post-id"));
};

[...document.getElementsByClassName("tag-btn")].forEach(el => {
  el.addEventListener("click", tagClick)
});

// like button function
const likeClick = e => {
  event.stopPropagation();
  var parent = getParent(e.target, '.post-body');

  const Url='http://yukku.org:8080/API/likes/modify/' + parent.getAttribute("data-post-id");

  fetch(Url)
  .then(data=>{return data.json()})
  .then(data=>{
    console.log(data.success)
    if (e.target.classList.contains("typcn-heart-outline")) {
      e.target.classList.remove("typcn-heart-outline");
      e.target.classList.add("typcn-heart-full-outline");
    } else {
      e.target.classList.remove("typcn-heart-full-outline");
      e.target.classList.add("typcn-heart-outline");
    }
  })

  console.log("like post with ID: " + parent.getAttribute("data-post-id"));
};

[...document.getElementsByClassName("like-btn")].forEach(el => {
  el.addEventListener("click", likeClick)
});

// reply button function
const ReplyClick = e => {
  event.stopPropagation();
  var parent = getParent(e.target, '.post-body');
  console.log("post to reply to: " + parent.getAttribute("data-post-id"));
};

// converting HTMLCollection to a normal Array
// look up the ES6 spread operator if you are unfamiliar with this
[...document.getElementsByClassName("reply-btn")].forEach(el => {
  el.addEventListener("click", ReplyClick)
});

// post redirection
const postClick = e => {
  console.log("redirect to: " + e.target.getAttribute("data-post-id"));
  if (!e.target.classList.contains('profile-item')) {

    // Get the parent with the `.post-body` class
		var parent = getParent(event.target, '.profile-item');

    postRedirect('/', parent.getAttribute("data-post-handle"), parent.getAttribute("data-post-id"));
  } else {
    postRedirect('/', e.target.getAttribute("data-post-handle"), e.target.getAttribute("data-post-id"));
  }
};

[...document.getElementsByClassName("profile-item")].forEach(el => {
  el.addEventListener("click", postClick)
});

// load more of the timeline
const LoadClick = e => {
  event.stopPropagation();
  var parent = getParent(e.target, '.profile-main');

  const Url='http://yukku.org:8080/API/posts/get_timeline/' + '1';

  fetch(Url)
  .then(data=>{return data.json()})
  .then(data=>{
    frag = document.createDocumentFragment();
    data.forEach(function(element) {

      var el = document.querySelector(".profile-item")
      var profileItem = el.cloneNode(true);

      frag.appendChild(profileItem)
      console.log("post: " + element.userHandle + " " + element.postID);

    });
    parent.appendChild(frag)
  })

};

// add event listener
document.querySelector(".load-btn").addEventListener("click", LoadClick);


console.log("scripts initialized");

/*
// create profile-item
var profileItem = document.createElement('div');
profileItem.classList.add("profile-item", "flex", "post-" + element.postID );
profileItem.setAttribute("data-post-id", element.postID);
profileItem.setAttribute("data-post-handle", element.userHandle);

// create profile-item
var postSide = document.createElement('div');
postSide.classList.add("post-side");

//<img src="url/default-person.jpg" alt="user avatar">
var img = document.createElement('img');
if (element.userAvatar == 0) {
  img.src = "<%- build_url() %>/static/img/profiles/default-person.jpg";
} else {
  img.src = "<%- build_url() %>/static/img/profiles/" + element.userID + "-avatar.jpg";
}
img.alt = "user avatar";

//<div class="post-body" data-post-id="29">
var postBody = document.createElement('div');
postBody.classList.add("post-body");
postBody.setAttribute("data-post-id", element.postID);

//<div class="post-header flex">
var postHeader = document.createElement('div');
postHeader.classList.add("post-header", "flex");

//<div class="post-user">
var postUser = document.createElement('div');
postUser.classList.add("post-user");

//<h4>username</h4>
var userName = document.createElement('h4');
userNameInner = document.createTextNode(element.userName + " ");

//<a href="/pepipopa">@pepipopa</a>
var userHandle = document.createElement('a');
userHandle.href = "/" + element.userHandle;
userHandleInner = document.createTextNode("@" + element.userHandle + " ");

var userGender = document.createElement('span');
userGenderInner = document.createTextNode(element.userGender);

var postTime = document.createElement('p');
postTimeInner = document.createTextNode(element.postTime);

var postContent = document.createElement('p');
postContent.innerHTML = element.postBody;

postSide.appendChild(img);
profileItem.appendChild(postSide);

userName.appendChild(userNameInner);
postUser.appendChild(userName);

userHandle.appendChild(userHandleInner);
postUser.appendChild(userHandle);

userGender.appendChild(userGenderInner);
postUser.appendChild(userGender);

postTime.appendChild(postTimeInner);

postHeader.appendChild(postUser);
postHeader.appendChild(postTime);

postBody.appendChild(postHeader);
postBody.appendChild(postContent);
profileItem.appendChild(postBody);
*/
